from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.scrollview import ScrollView
from kivy.uix.checkbox import CheckBox
from twilio.rest import Client

# ДАННЫЕ ДЛЯ TWILIO
ACCOUNT_SID = "********"
AUTH_TOKEN = "********"
TWILIO_PHONE_NUMBER = "*********"

class StudentTrackerApp(App):
    def build(self):
        self.root_layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
        self.students_list = BoxLayout(orientation='vertical', size_hint_y=None, padding=10, spacing=10)
        self.students_list.bind(minimum_height=self.students_list.setter('height'))
        
        self.scroll_view = ScrollView(size_hint=(1, 0.9))
        self.scroll_view.add_widget(self.students_list)
        
        add_button = Button(text='+', size_hint=(None, None), size=(60, 60),
                            pos_hint={'x': 0, 'top': 1}, background_color=(0.2, 0.6, 1, 1), font_size=24)
        add_button.bind(on_release=self.show_add_student_popup)
        
        self.root_layout.add_widget(self.scroll_view)
        self.root_layout.add_widget(add_button)
        
        self.students = {}  # Словарь {имя: номер телефона}
        
        return self.root_layout
    
    def show_add_student_popup(self, instance):
        popup_layout = BoxLayout(orientation='vertical', padding=15, spacing=15)
        self.name_input = TextInput(hint_text='Имя ученика', font_size=18, size_hint_y=None, height=50)
        self.phone_input = TextInput(hint_text='Номер родителя', font_size=18, size_hint_y=None, height=50)
        
        ok_button = Button(text='OK', font_size=18, size_hint_y=None, height=50, background_color=(0.2, 0.8, 0.2, 1))
        ok_button.bind(on_release=self.add_student)
        
        popup_layout.add_widget(self.name_input)
        popup_layout.add_widget(self.phone_input)
        popup_layout.add_widget(ok_button)
        
        self.popup = Popup(title='Добавить ученика', content=popup_layout, size_hint=(0.8, 0.4))
        self.popup.open()
    
    def add_student(self, instance):
        name = self.name_input.text.strip()
        phone = self.phone_input.text.strip()
        
        if name and phone:
            student_button = Button(text=f'{name} - {phone}', size_hint_y=None, height=50, font_size=16,
                                    background_color=(0.5, 0.5, 0.5, 1))
            student_button.bind(on_release=self.show_status_popup)
            self.students_list.add_widget(student_button)
            
            self.students[name] = phone  # Сохраняем номер
        
        self.popup.dismiss()
    
    def show_status_popup(self, instance):
        name_phone = instance.text.split(" - ")
        student_name = name_phone[0]
        phone_number = name_phone[1] if len(name_phone) > 1 else None
        
        if not phone_number:
            return
        
        popup_layout = BoxLayout(orientation='vertical', padding=15, spacing=15)
        
        self.status_checkboxes = {}  # Словарь для хранения чекбоксов
        
        statuses = {
            "Пришел": "Ваш ребенок пришел в школу.",
            "Не пришел": "Ваш ребенок не пришел в школу.",
            "Заболел": None  # Не отправляем сообщение
        }
        
        for status in statuses:
            row = BoxLayout(orientation='horizontal', spacing=15)
            label = Label(text=status, font_size=16, size_hint_x=0.7)
            checkbox = CheckBox(size_hint_x=0.3)
            row.add_widget(label)
            row.add_widget(checkbox)
            popup_layout.add_widget(row)
            self.status_checkboxes[status] = checkbox  # Добавляем чекбокс в словарь
        
        send_button = Button(text='Отправить', font_size=18, size_hint_y=None, height=50, background_color=(1, 0.2, 0.2, 1))
        send_button.bind(on_release=lambda x: self.send_status(student_name, phone_number, statuses))
        
        popup_layout.add_widget(send_button)
        
        self.popup = Popup(title=f'Статус {student_name}', content=popup_layout, size_hint=(0.8, 0.5))
        self.popup.open()
    
    def send_status(self, student_name, phone_number, statuses):
        for status, message in statuses.items():
            if self.status_checkboxes[status].active:  # Если чекбокс нажат
                if message:  # Если сообщение не None, отправляем
                    self.send_sms(phone_number, message)
                break  # Выбираем только один статус
        
        self.popup.dismiss()
    
    def send_sms(self, phone_number, message):
        client = Client(ACCOUNT_SID, AUTH_TOKEN)
        client.messages.create(
            body=message,
            from_=TWILIO_PHONE_NUMBER,
            to=phone_number
        )

if __name__ == '__main__':
    StudentTrackerApp().run()
